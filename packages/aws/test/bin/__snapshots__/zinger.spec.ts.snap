// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`aws cdk deployment prod GithubActionsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderHandlerF2C543E0": Object {
      "DependsOn": Array [
        "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-647127556763-ap-northeast-1",
          "S3Key": "494e82802f093e633e580188c7937aef9d6ee0ad4a788d58c647e6bea26d2915.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "iam:CreateOpenIDConnectProvider",
                    "iam:DeleteOpenIDConnectProvider",
                    "iam:UpdateOpenIDConnectProviderThumbprint",
                    "iam:AddClientIDToOpenIDConnectProvider",
                    "iam:RemoveClientIDFromOpenIDConnectProvider",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerGitHubActionsOidcProvider0DBBC94E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ClientIDList": Array [
          "sts.amazonaws.com",
        ],
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderHandlerF2C543E0",
            "Arn",
          ],
        },
        "ThumbprintList": Array [
          "6938fd4d98bab03faadb97b34396831e3780aea1",
        ],
        "Url": "https://token.actions.githubusercontent.com",
      },
      "Type": "Custom::AWSCDKOpenIdConnectProvider",
      "UpdateReplacePolicy": "Delete",
    },
    "ZingerGitHubActionsRoleFAAE0046": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": Object {
                "StringLike": Object {
                  "token.actions.githubusercontent.com:sub": "repo:eustylelab/zinger:*",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Federated": Object {
                  "Ref": "ZingerGitHubActionsOidcProvider0DBBC94E",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonECS_FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLogsReadOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "ZingerGitHubActionsRole",
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod RedashStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "RedashARecord0CB8077C": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": "dualstack.my-load-balancer-1234567890.us-west-2.elb.amazonaws.com",
          "HostedZoneId": "Z3DZXE0EXAMPLE",
        },
        "HostedZoneId": "DUMMY",
        "Name": "redash.careid.jp.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "RedashAaaaRecord4677E0F5": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": "dualstack.my-load-balancer-1234567890.us-west-2.elb.amazonaws.com",
          "HostedZoneId": "Z3DZXE0EXAMPLE",
        },
        "HostedZoneId": "DUMMY",
        "Name": "redash.careid.jp.",
        "Type": "AAAA",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "RedashAlbListenerRedashAddCertificates69FBD541": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Fn::GetAtt": Array [
                "RedashCertificateCertificateRequestorResourceD542F46F",
                "Arn",
              ],
            },
          },
        ],
        "ListenerArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/application/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerCertificate",
    },
    "RedashBackupPlan3F2252F2": Object {
      "Properties": Object {
        "BackupPlan": Object {
          "BackupPlanName": "RedashBackupPlan",
          "BackupPlanRule": Array [
            Object {
              "CompletionWindowMinutes": 120,
              "Lifecycle": Object {
                "DeleteAfterDays": 7,
              },
              "RuleName": "RedashBackupPlanRule0",
              "ScheduleExpression": "cron(35 17 * * ? *)",
              "StartWindowMinutes": 60,
              "TargetBackupVault": Object {
                "Fn::GetAtt": Array [
                  "RedashBackupPlanVaultE7EA5519",
                  "BackupVaultName",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::Backup::BackupPlan",
    },
    "RedashBackupPlanVaultE7EA5519": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BackupVaultName": "RedashStackRedashBackupPlanVaultDEA74FC4",
      },
      "Type": "AWS::Backup::BackupVault",
      "UpdateReplacePolicy": "Retain",
    },
    "RedashBackupSelection60659C30": Object {
      "Properties": Object {
        "BackupPlanId": Object {
          "Fn::GetAtt": Array [
            "RedashBackupPlan3F2252F2",
            "BackupPlanId",
          ],
        },
        "BackupSelection": Object {
          "IamRoleArn": Object {
            "Fn::GetAtt": Array [
              "RedashBackupSelectionRole894AACE0",
              "Arn",
            ],
          },
          "Resources": Array [
            Object {
              "Fn::Join": Array [
                "",
                Array [
                  "arn:",
                  Object {
                    "Ref": "AWS::Partition",
                  },
                  ":ec2:ap-northeast-1:647127556763:instance/",
                  Object {
                    "Ref": "ZingerRedash3AA76581",
                  },
                ],
              ],
            },
          ],
          "SelectionName": "RedashBackupSelection",
        },
      },
      "Type": "AWS::Backup::BackupSelection",
    },
    "RedashBackupSelectionRole894AACE0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "backup.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RedashCertificateCertificateRequestorFunction1C0DE7E5": Object {
      "DependsOn": Array [
        "RedashCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy2DB4A08B",
        "RedashCertificateCertificateRequestorFunctionServiceRole0860A42E",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-647127556763-ap-northeast-1",
          "S3Key": "8ddf29ab619460567d3cda58de2ff1bf0f6e95d8822ff630ec58a4d52ed1fa67.zip",
        },
        "Handler": "index.certificateRequestHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RedashCertificateCertificateRequestorFunctionServiceRole0860A42E",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "RedashCertificateCertificateRequestorFunctionServiceRole0860A42E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RedashCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy2DB4A08B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "acm:RequestCertificate",
                "acm:DescribeCertificate",
                "acm:DeleteCertificate",
                "acm:AddTagsToCertificate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:GetChange",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:changeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RedashCertificateCertificateRequestorFunctionServiceRoleDefaultPolicy2DB4A08B",
        "Roles": Array [
          Object {
            "Ref": "RedashCertificateCertificateRequestorFunctionServiceRole0860A42E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RedashCertificateCertificateRequestorResourceD542F46F": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DomainName": "redash.careid.jp",
        "HostedZoneId": "DUMMY",
        "Region": "ap-northeast-1",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "RedashCertificateCertificateRequestorFunction1C0DE7E5",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "RedashElasticIp": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "RedashElasticIp",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "RedashElasticIpAssociation": Object {
      "Properties": Object {
        "EIP": Object {
          "Ref": "RedashElasticIp",
        },
        "InstanceId": Object {
          "Ref": "ZingerRedash3AA76581",
        },
      },
      "Type": "AWS::EC2::EIPAssociation",
    },
    "RedashIamRoleA218608E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "RoleName": "ZingerRedashRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "RedashListenerRule0F42C59F": Object {
      "Properties": Object {
        "Actions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "RedashTargetGroup21991DF3",
            },
            "Type": "forward",
          },
        ],
        "Conditions": Array [
          Object {
            "Field": "host-header",
            "HostHeaderConfig": Object {
              "Values": Array [
                "redash.careid.jp",
              ],
            },
          },
        ],
        "ListenerArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/application/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
        "Priority": 1,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "RedashSecurityGroup47592F4E": Object {
      "Properties": Object {
        "GroupDescription": "RedashStack/RedashSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RedashTargetGroup21991DF3": Object {
      "Properties": Object {
        "Name": "RedashTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "instance",
        "Targets": Array [
          Object {
            "Id": Object {
              "Ref": "ZingerRedash3AA76581",
            },
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ZingerRedash3AA76581": Object {
      "DependsOn": Array [
        "RedashIamRoleA218608E",
      ],
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "BlockDeviceMappings": Array [
          Object {
            "DeviceName": "/dev/sda1",
            "Ebs": Object {
              "VolumeSize": 20,
            },
          },
        ],
        "IamInstanceProfile": Object {
          "Ref": "ZingerRedashInstanceProfileECA65D08",
        },
        "ImageId": "ami-1234",
        "InstanceType": "t3a.small",
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "RedashSecurityGroup47592F4E",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerRedash",
          },
        ],
        "UserData": Object {
          "Fn::Base64": "#!/bin/bash",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "ZingerRedashInstanceProfileECA65D08": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "RedashIamRoleA218608E",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerAlbDnsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerARecord13A775A7": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "ZingerAlb11686151",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "ZingerAlb11686151",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "DUMMY",
        "Name": "*.careid.jp.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ZingerAaaaRecordA8C1458C": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "ZingerAlb11686151",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "ZingerAlb11686151",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "DUMMY",
        "Name": "*.careid.jp.",
        "Type": "AAAA",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ZingerAlb11686151": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
          Object {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          Object {
            "Key": "access_logs.s3.bucket",
            "Value": Object {
              "Fn::ImportValue": "ZingerS3Stack:ExportsOutputRefZingerLogStorage9A79459AE067C76C",
            },
          },
          Object {
            "Key": "access_logs.s3.prefix",
            "Value": "",
          },
        ],
        "Name": "ZingerAlb",
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363",
          },
        ],
        "Subnets": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerAlb",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ZingerAlbZingerHttpListener6473941A": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ZingerTargetGroupD1CE7401",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ZingerAlb11686151",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ZingerAlbZingerHttpsListenerC8B1FB2D": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Fn::GetAtt": Array [
                "ZingerCertificateCertificateRequestorResource7602353B",
                "Arn",
              ],
            },
          },
        ],
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ZingerTargetGroupD1CE7401",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ZingerAlb11686151",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ZingerCertificateCertificateRequestorFunction436CF905": Object {
      "DependsOn": Array [
        "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0",
        "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-647127556763-ap-northeast-1",
          "S3Key": "8ddf29ab619460567d3cda58de2ff1bf0f6e95d8822ff630ec58a4d52ed1fa67.zip",
        },
        "Handler": "index.certificateRequestHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "acm:RequestCertificate",
                "acm:DescribeCertificate",
                "acm:DeleteCertificate",
                "acm:AddTagsToCertificate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:GetChange",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:changeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0",
        "Roles": Array [
          Object {
            "Ref": "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ZingerCertificateCertificateRequestorResource7602353B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DomainName": "*.careid.jp",
        "HostedZoneId": "DUMMY",
        "Region": "ap-northeast-1",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "ZingerCertificateCertificateRequestorFunction436CF905",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ZingerHttpListenerRuleA677D4E4": Object {
      "Properties": Object {
        "Actions": Array [
          Object {
            "RedirectConfig": Object {
              "Port": "443",
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
            },
            "Type": "redirect",
          },
        ],
        "Conditions": Array [
          Object {
            "Field": "path-pattern",
            "PathPatternConfig": Object {
              "Values": Array [
                "*",
              ],
            },
          },
        ],
        "ListenerArn": Object {
          "Ref": "ZingerAlbZingerHttpListener6473941A",
        },
        "Priority": 1,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ZingerTargetGroupD1CE7401": Object {
      "Properties": Object {
        "Name": "ZingerTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "true",
          },
          Object {
            "Key": "stickiness.type",
            "Value": "lb_cookie",
          },
          Object {
            "Key": "stickiness.lb_cookie.duration_seconds",
            "Value": "86400",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerBastionStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "ZingerBastion538A6BFD": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": Object {
          "Ref": "ZingerBastionInstanceProfileC4002CEC",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t2.micro",
        "KeyName": "zingerKey",
        "SecurityGroupIds": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29",
          },
        ],
        "SubnetId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerBastion",
          },
        ],
        "UserData": Object {
          "Fn::Base64": "#!/bin/bash
yum update -y
yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
yum-config-manager --enable mysql80-community
yum install -y mysql-community-client
amazon-linux-extras install -y redis4.0
yum install -y stunnel
hostnamectl set-hostname zinger-bastion",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "ZingerBastionElasticIp": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerBastionElasticIp",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerBastionElasticIpAssociation": Object {
      "Properties": Object {
        "EIP": Object {
          "Ref": "ZingerBastionElasticIp",
        },
        "InstanceId": Object {
          "Ref": "ZingerBastion538A6BFD",
        },
      },
      "Type": "AWS::EC2::EIPAssociation",
    },
    "ZingerBastionInstanceProfileC4002CEC": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Fn::ImportValue": "ZingerIamStack:ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerDbStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerMysql9818A87E": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "AllocatedStorage": "100",
        "AutoMinorVersionUpgrade": false,
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t2.micro",
        "DBInstanceIdentifier": "zinger-mysql",
        "DBName": "zinger",
        "DBParameterGroupName": Object {
          "Ref": "ZingerMysqlParameterGroup76029A07",
        },
        "DBSubnetGroupName": Object {
          "Ref": "ZingerMysqlSubnetGroup8886398E",
        },
        "DeletionProtection": true,
        "EnableCloudwatchLogsExports": Array [
          "error",
          "slowquery",
        ],
        "Engine": "mysql",
        "EngineVersion": "8.0.28",
        "MasterUserPassword": "{{resolve:ssm-secure:/zinger/secure/dbMasterPassword:1}}",
        "MasterUsername": "zinger_master",
        "MultiAZ": true,
        "PreferredBackupWindow": "20:05-20:35",
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508",
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "ZingerMysqlParameterGroup76029A07": Object {
      "Properties": Object {
        "Description": "Parameter group for mysql8.0",
        "Family": "mysql8.0",
        "Parameters": Object {
          "log_bin_trust_function_creators": "1",
          "long_query_time": "1",
        },
      },
      "Type": "AWS::RDS::DBParameterGroup",
    },
    "ZingerMysqlSubnetGroup8886398E": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for ZingerMysql database",
        "SubnetIds": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "ZingerSsmMysqlHostD286E771": Object {
      "Properties": Object {
        "Name": "/zinger/string/dbHost",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "ZingerMysql9818A87E",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerEcrStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerAppCliProd9C003D54": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/app-cli-prod",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerAppServerProdD45B0F53": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/app-server-prod",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerWebProdADCF236A": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/web-prod",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerEcsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerEcsC496BF8F": Object {
      "Properties": Object {
        "ClusterName": "ZingerEcsCluster",
      },
      "Type": "AWS::ECS::Cluster",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerIamStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538": Object {
      "Export": Object {
        "Name": "ZingerIamStack:ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538",
      },
      "Value": Object {
        "Ref": "ZingerIamBastionRoleEE6547EA",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "ZingerExternalIdParameter": Object {
      "Default": "/zinger/string/mackerelExternalId",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerIamBastionRoleEE6547EA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSQSFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "RoleName": "ZingerBastionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsEventsRole6DFC1A82": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "RoleName": "ecsEventsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsTaskExecutionRole0FE66AEB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonECS_FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
        "RoleName": "ZingerEcsTaskExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsTaskRole97A462F3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSQSFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMDirectoryServiceAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "RoleName": "ZingerEcsTaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerMackerelPolicyC4CA3580": Object {
      "Properties": Object {
        "Description": "",
        "ManagedPolicyName": "ZingerMackerelPolicy",
        "Path": "/",
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "ec2:DescribeInstances",
                "ecs:DescribeClusters",
                "ecs:List*",
                "elasticache:Describe*",
                "elasticache:ListTagsForResource",
                "elasticloadbalancing:Describe*",
                "iam:GetUser",
                "rds:Describe*",
                "rds:ListTagsForResource",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "ZingerMackerelRole757B60EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Condition": Object {
                "StringEquals": Object {
                  "sts:ExternalId": Object {
                    "Ref": "ZingerExternalIdParameter",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::217452466226:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Ref": "ZingerMackerelPolicyC4CA3580",
          },
        ],
        "RoleName": "ZingerMackerelRole",
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerRedisStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerRedisSubnetGroup": Object {
      "Properties": Object {
        "CacheSubnetGroupName": "zinger-redis-subnet-group",
        "Description": "subnet is private",
        "SubnetIds": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
          },
        ],
      },
      "Type": "AWS::ElastiCache::SubnetGroup",
    },
    "ZingerReplicationGroup": Object {
      "DependsOn": Array [
        "ZingerRedisSubnetGroup",
      ],
      "Properties": Object {
        "AuthToken": "{{resolve:ssm-secure:/zinger/secure/redisPassword:1}}",
        "AutomaticFailoverEnabled": true,
        "CacheNodeType": "cache.t2.micro",
        "CacheSubnetGroupName": "zinger-redis-subnet-group",
        "Engine": "redis",
        "EngineVersion": "6.x",
        "MultiAZEnabled": true,
        "NumCacheClusters": 2,
        "ReplicationGroupDescription": "Zinger redis replication",
        "SecurityGroupIds": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03",
          },
        ],
        "TransitEncryptionEnabled": true,
      },
      "Type": "AWS::ElastiCache::ReplicationGroup",
    },
    "ZingerSsmRedisHost2390C4E7": Object {
      "Properties": Object {
        "Name": "/zinger/string/redisHost",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "ZingerReplicationGroup",
            "PrimaryEndPoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerS3Stack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputFnGetAttZingerLogStorage9A79459AArnECC5CDF2": Object {
      "Export": Object {
        "Name": "ZingerS3Stack:ExportsOutputFnGetAttZingerLogStorage9A79459AArnECC5CDF2",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerLogStorage9A79459A",
          "Arn",
        ],
      },
    },
    "ExportsOutputRefZingerLogStorage9A79459AE067C76C": Object {
      "Export": Object {
        "Name": "ZingerS3Stack:ExportsOutputRefZingerLogStorage9A79459AE067C76C",
      },
      "Value": Object {
        "Ref": "ZingerLogStorage9A79459A",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerAppStorageE082949A": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-app-storage",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 3650,
              "Id": "artifacts",
              "Prefix": "artifacts",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 365,
                },
              ],
            },
            Object {
              "ExpirationInDays": 30,
              "Id": "temp",
              "Prefix": "temp",
              "Status": "Enabled",
            },
            Object {
              "ExpirationInDays": 365,
              "Id": "exported",
              "Prefix": "exported",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 180,
                },
              ],
            },
            Object {
              "ExpirationInDays": 365,
              "Id": "imported",
              "Prefix": "imported",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 180,
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerLogStorage9A79459A": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-log-storage",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 3650,
              "Id": "zinger-log-storage",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerLogStoragePolicyBDC622A6": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ZingerLogStorage9A79459A",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::582318560864:root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerLogStorage9A79459A",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/647127556763/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "s3:PutObject",
              "Condition": Object {
                "StringEquals": Object {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerLogStorage9A79459A",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/647127556763/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ZingerLogStorage9A79459A",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ZingerOpsStorageD2490013": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-ops-storage",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 30,
              "Id": "zinger-ops-storage",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerPublicStorage03BD58E4": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-public-storage",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "Id": "zinger-public-storage",
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 3650,
              },
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
        "WebsiteConfiguration": Object {
          "IndexDocument": "index.html",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerPublicStoragePolicy5EBBC1B6": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ZingerPublicStorage03BD58E4",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerPublicStorage03BD58E4",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerSecurityGroupStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupAlb46CA9FF7",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupBastionC7C3D040",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupMysqlD57A915B",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupRedis3D53F2D9",
          "GroupId",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerSecurityGroupAlb46CA9FF7": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupAlb",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupBastionC7C3D040": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupBastion",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupEcs831EAAB8": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupEcs",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupEcsfromZingerSecurityGroupStackZingerSecurityGroupAlbCC2AC14D550809F065831": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupAlbCC2AC14D:55080",
        "FromPort": 55080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupAlb46CA9FF7",
            "GroupId",
          ],
        },
        "ToPort": 55080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupEcsfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A5508017F1EFBF": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:55080",
        "FromPort": 55080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 55080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupMysqlD57A915B": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupMysql",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupMysqlfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A33061027A1DF": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupMysqlD57A915B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupMysqlfromZingerSecurityGroupStackZingerSecurityGroupEcs967C84323306077F6C51": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupEcs967C8432:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupMysqlD57A915B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupRedis3D53F2D9": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupRedis",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupRedisfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A6379476AC6E9": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:6379",
        "FromPort": 6379,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupRedis3D53F2D9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupRedisfromZingerSecurityGroupStackZingerSecurityGroupEcs967C84326379C150B161": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupEcs967C8432:6379",
        "FromPort": 6379,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupRedis3D53F2D9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerSqsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerQueue19D9885A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "FifoQueue": true,
        "QueueName": "ZingerQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment prod ZingerVpcStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputRefZingerVpcE887B962818892AA": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
      },
      "Value": Object {
        "Ref": "ZingerVpcE887B962",
      },
    },
    "ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
      },
      "Value": Object {
        "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
      },
    },
    "ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
      },
      "Value": Object {
        "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
      },
    },
    "ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
      },
      "Value": Object {
        "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
      },
    },
    "ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5",
      },
      "Value": Object {
        "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerVpcE887B962": Object {
      "Properties": Object {
        "CidrBlock": "10.20.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "ZingerVpcIGWAAEB5C30": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "ZingerVpcPrivateSubnet1DefaultRouteBE55C4A7": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "ZingerVpcPublicSubnet1NATGateway67A45EB0",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPrivateSubnet1RouteTable1270371F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPrivateSubnet1RouteTableAssociation9CDB3832": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPrivateSubnet1SubnetAB7C2829": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.20.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPrivateSubnet2DefaultRoute4D6724BD": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "ZingerVpcPublicSubnet2NATGateway9BC1F003",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPrivateSubnet2RouteTableAssociation5DE5645D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPrivateSubnet2SubnetC985B745": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.20.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPublicSubnet1DefaultRoute4B2C6402": Object {
      "DependsOn": Array [
        "ZingerVpcVPCGW2A01A394",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet1RouteTable2108AD82",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPublicSubnet1EIP24A52E6A": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerVpcPublicSubnet1NATGateway67A45EB0": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "ZingerVpcPublicSubnet1EIP24A52E6A",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ZingerVpcPublicSubnet1RouteTable2108AD82": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPublicSubnet1RouteTableAssociation52FFCD9A": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet1RouteTable2108AD82",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPublicSubnet1SubnetB7A28AAE": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.20.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPublicSubnet2DefaultRouteDAC3D769": Object {
      "DependsOn": Array [
        "ZingerVpcVPCGW2A01A394",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet2RouteTable1D39F9EF",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPublicSubnet2EIPE2660C08": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerVpcPublicSubnet2NATGateway9BC1F003": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "ZingerVpcPublicSubnet2EIPE2660C08",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ZingerVpcPublicSubnet2RouteTable1D39F9EF": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPublicSubnet2RouteTableAssociation6F736464": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet2RouteTable1D39F9EF",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPublicSubnet2SubnetC5C2022B": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.20.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcVPCGW2A01A394": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ZingerVpcZingerGatewayEndpointS3FFB59DD7": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointCloudwatchLogs6ACBF4C0": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointCloudwatchLogsSecurityGroup3DE843B3",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.logs",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointCloudwatchLogsSecurityGroup3DE843B3": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointCloudwatchLogs/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointEcr5E9757C0": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointEcrSecurityGroupD9C1EA56",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ecr.api",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointEcrDockerB1B9FB08": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointEcrDockerSecurityGroupD4E02C1C",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ecr.dkr",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointEcrDockerSecurityGroupD4E02C1C": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointEcrDocker/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointEcrSecurityGroupD9C1EA56": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointEcr/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointSsm77754242": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointSsmSecurityGroupE23F59A5",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ssm",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointSsmSecurityGroupE23F59A5": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointSsm/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcvpcFlowLog8F2EB798": Object {
      "Properties": Object {
        "LogDestination": Object {
          "Fn::ImportValue": "ZingerS3Stack:ExportsOutputFnGetAttZingerLogStorage9A79459AArnECC5CDF2",
        },
        "LogDestinationType": "s3",
        "ResourceId": Object {
          "Ref": "ZingerVpcE887B962",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox GithubActionsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderHandlerF2C543E0": Object {
      "DependsOn": Array [
        "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-869997810708-ap-northeast-1",
          "S3Key": "494e82802f093e633e580188c7937aef9d6ee0ad4a788d58c647e6bea26d2915.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "iam:CreateOpenIDConnectProvider",
                    "iam:DeleteOpenIDConnectProvider",
                    "iam:UpdateOpenIDConnectProviderThumbprint",
                    "iam:AddClientIDToOpenIDConnectProvider",
                    "iam:RemoveClientIDFromOpenIDConnectProvider",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerGitHubActionsOidcProvider0DBBC94E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ClientIDList": Array [
          "sts.amazonaws.com",
        ],
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderHandlerF2C543E0",
            "Arn",
          ],
        },
        "ThumbprintList": Array [
          "6938fd4d98bab03faadb97b34396831e3780aea1",
        ],
        "Url": "https://token.actions.githubusercontent.com",
      },
      "Type": "Custom::AWSCDKOpenIdConnectProvider",
      "UpdateReplacePolicy": "Delete",
    },
    "ZingerGitHubActionsRoleFAAE0046": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": Object {
                "StringLike": Object {
                  "token.actions.githubusercontent.com:sub": "repo:eustylelab/zinger:*",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Federated": Object {
                  "Ref": "ZingerGitHubActionsOidcProvider0DBBC94E",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonECS_FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLogsReadOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "ZingerGitHubActionsRole",
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox RedashStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerAlbDnsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerARecord13A775A7": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "ZingerAlb11686151",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "ZingerAlb11686151",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "DUMMY",
        "Name": "*.sandbox.careid.net.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ZingerAaaaRecordA8C1458C": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "ZingerAlb11686151",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "ZingerAlb11686151",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "DUMMY",
        "Name": "*.sandbox.careid.net.",
        "Type": "AAAA",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ZingerAlb11686151": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
          Object {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          Object {
            "Key": "access_logs.s3.bucket",
            "Value": Object {
              "Fn::ImportValue": "ZingerS3Stack:ExportsOutputRefZingerLogStorageSandbox42772588EBF2892F",
            },
          },
          Object {
            "Key": "access_logs.s3.prefix",
            "Value": "",
          },
        ],
        "Name": "ZingerAlb",
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363",
          },
        ],
        "Subnets": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerAlb",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ZingerAlbZingerHttpListener6473941A": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ZingerTargetGroupD1CE7401",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ZingerAlb11686151",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ZingerAlbZingerHttpsListenerC8B1FB2D": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Fn::GetAtt": Array [
                "ZingerCertificateCertificateRequestorResource7602353B",
                "Arn",
              ],
            },
          },
        ],
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ZingerTargetGroupD1CE7401",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ZingerAlb11686151",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ZingerCertificateCertificateRequestorFunction436CF905": Object {
      "DependsOn": Array [
        "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0",
        "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-869997810708-ap-northeast-1",
          "S3Key": "8ddf29ab619460567d3cda58de2ff1bf0f6e95d8822ff630ec58a4d52ed1fa67.zip",
        },
        "Handler": "index.certificateRequestHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "acm:RequestCertificate",
                "acm:DescribeCertificate",
                "acm:DeleteCertificate",
                "acm:AddTagsToCertificate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:GetChange",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:changeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0",
        "Roles": Array [
          Object {
            "Ref": "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ZingerCertificateCertificateRequestorResource7602353B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DomainName": "*.sandbox.careid.net",
        "HostedZoneId": "DUMMY",
        "Region": "ap-northeast-1",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "ZingerCertificateCertificateRequestorFunction436CF905",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ZingerHttpListenerRuleA677D4E4": Object {
      "Properties": Object {
        "Actions": Array [
          Object {
            "RedirectConfig": Object {
              "Port": "443",
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
            },
            "Type": "redirect",
          },
        ],
        "Conditions": Array [
          Object {
            "Field": "path-pattern",
            "PathPatternConfig": Object {
              "Values": Array [
                "*",
              ],
            },
          },
        ],
        "ListenerArn": Object {
          "Ref": "ZingerAlbZingerHttpListener6473941A",
        },
        "Priority": 1,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ZingerTargetGroupD1CE7401": Object {
      "Properties": Object {
        "Name": "ZingerTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "true",
          },
          Object {
            "Key": "stickiness.type",
            "Value": "lb_cookie",
          },
          Object {
            "Key": "stickiness.lb_cookie.duration_seconds",
            "Value": "86400",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerBastionStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "ZingerBastion538A6BFD": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": Object {
          "Ref": "ZingerBastionInstanceProfileC4002CEC",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t2.micro",
        "KeyName": "sandboxZingerKey",
        "SecurityGroupIds": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29",
          },
        ],
        "SubnetId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerBastion",
          },
        ],
        "UserData": Object {
          "Fn::Base64": "#!/bin/bash
yum update -y
yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
yum-config-manager --enable mysql80-community
yum install -y mysql-community-client
amazon-linux-extras install -y redis4.0
yum install -y stunnel
hostnamectl set-hostname zinger-bastion-sandbox",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "ZingerBastionElasticIp": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerBastionElasticIp",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerBastionElasticIpAssociation": Object {
      "Properties": Object {
        "EIP": Object {
          "Ref": "ZingerBastionElasticIp",
        },
        "InstanceId": Object {
          "Ref": "ZingerBastion538A6BFD",
        },
      },
      "Type": "AWS::EC2::EIPAssociation",
    },
    "ZingerBastionInstanceProfileC4002CEC": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Fn::ImportValue": "ZingerIamStack:ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerDbStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerMysql9818A87E": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "AllocatedStorage": "100",
        "AutoMinorVersionUpgrade": false,
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t2.micro",
        "DBInstanceIdentifier": "zinger-mysql",
        "DBName": "zinger",
        "DBParameterGroupName": Object {
          "Ref": "ZingerMysqlParameterGroup76029A07",
        },
        "DBSubnetGroupName": Object {
          "Ref": "ZingerMysqlSubnetGroup8886398E",
        },
        "DeletionProtection": true,
        "EnableCloudwatchLogsExports": Array [
          "error",
          "slowquery",
        ],
        "Engine": "mysql",
        "EngineVersion": "8.0.28",
        "MasterUserPassword": "{{resolve:ssm-secure:/zinger/secure/dbMasterPassword:1}}",
        "MasterUsername": "zinger_master",
        "MultiAZ": false,
        "PreferredBackupWindow": "20:05-20:35",
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508",
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "ZingerMysqlParameterGroup76029A07": Object {
      "Properties": Object {
        "Description": "Parameter group for mysql8.0",
        "Family": "mysql8.0",
        "Parameters": Object {
          "log_bin_trust_function_creators": "1",
          "long_query_time": "1",
        },
      },
      "Type": "AWS::RDS::DBParameterGroup",
    },
    "ZingerMysqlSubnetGroup8886398E": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for ZingerMysql database",
        "SubnetIds": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "ZingerSsmMysqlHostD286E771": Object {
      "Properties": Object {
        "Name": "/zinger/string/dbHost",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "ZingerMysql9818A87E",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerEcrStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerAppCliSandbox1DA8A73B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/app-cli-sandbox",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerAppServerSandboxE7AEA86B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/app-server-sandbox",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerWebSandboxEEEBDA6B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/web-sandbox",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerEcsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerEcsC496BF8F": Object {
      "Properties": Object {
        "ClusterName": "ZingerEcsCluster",
      },
      "Type": "AWS::ECS::Cluster",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerIamStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538": Object {
      "Export": Object {
        "Name": "ZingerIamStack:ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538",
      },
      "Value": Object {
        "Ref": "ZingerIamBastionRoleEE6547EA",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "ZingerExternalIdParameter": Object {
      "Default": "/zinger/string/mackerelExternalId",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerIamBastionRoleEE6547EA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSQSFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "RoleName": "ZingerBastionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsEventsRole6DFC1A82": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "RoleName": "ecsEventsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsTaskExecutionRole0FE66AEB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonECS_FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
        "RoleName": "ZingerEcsTaskExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsTaskRole97A462F3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSQSFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMDirectoryServiceAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "RoleName": "ZingerEcsTaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerMackerelPolicyC4CA3580": Object {
      "Properties": Object {
        "Description": "",
        "ManagedPolicyName": "ZingerMackerelPolicy",
        "Path": "/",
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "ec2:DescribeInstances",
                "ecs:DescribeClusters",
                "ecs:List*",
                "elasticache:Describe*",
                "elasticache:ListTagsForResource",
                "elasticloadbalancing:Describe*",
                "iam:GetUser",
                "rds:Describe*",
                "rds:ListTagsForResource",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "ZingerMackerelRole757B60EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Condition": Object {
                "StringEquals": Object {
                  "sts:ExternalId": Object {
                    "Ref": "ZingerExternalIdParameter",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::217452466226:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Ref": "ZingerMackerelPolicyC4CA3580",
          },
        ],
        "RoleName": "ZingerMackerelRole",
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerRedisStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerRedisSubnetGroup": Object {
      "Properties": Object {
        "CacheSubnetGroupName": "zinger-redis-subnet-group",
        "Description": "subnet is private",
        "SubnetIds": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
          },
        ],
      },
      "Type": "AWS::ElastiCache::SubnetGroup",
    },
    "ZingerReplicationGroup": Object {
      "DependsOn": Array [
        "ZingerRedisSubnetGroup",
      ],
      "Properties": Object {
        "AuthToken": "{{resolve:ssm-secure:/zinger/secure/redisPassword:1}}",
        "AutomaticFailoverEnabled": false,
        "CacheNodeType": "cache.t2.micro",
        "CacheSubnetGroupName": "zinger-redis-subnet-group",
        "Engine": "redis",
        "EngineVersion": "6.x",
        "MultiAZEnabled": false,
        "NumCacheClusters": 1,
        "ReplicationGroupDescription": "Zinger redis replication",
        "SecurityGroupIds": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03",
          },
        ],
        "TransitEncryptionEnabled": true,
      },
      "Type": "AWS::ElastiCache::ReplicationGroup",
    },
    "ZingerSsmRedisHost2390C4E7": Object {
      "Properties": Object {
        "Name": "/zinger/string/redisHost",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "ZingerReplicationGroup",
            "PrimaryEndPoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerS3Stack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputFnGetAttZingerLogStorageSandbox42772588ArnD8208C25": Object {
      "Export": Object {
        "Name": "ZingerS3Stack:ExportsOutputFnGetAttZingerLogStorageSandbox42772588ArnD8208C25",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerLogStorageSandbox42772588",
          "Arn",
        ],
      },
    },
    "ExportsOutputRefZingerLogStorageSandbox42772588EBF2892F": Object {
      "Export": Object {
        "Name": "ZingerS3Stack:ExportsOutputRefZingerLogStorageSandbox42772588EBF2892F",
      },
      "Value": Object {
        "Ref": "ZingerLogStorageSandbox42772588",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerAppStorageSandbox1E9CD65C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-app-storage-sandbox",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 3650,
              "Id": "artifacts",
              "Prefix": "artifacts",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 365,
                },
              ],
            },
            Object {
              "ExpirationInDays": 30,
              "Id": "temp",
              "Prefix": "temp",
              "Status": "Enabled",
            },
            Object {
              "ExpirationInDays": 365,
              "Id": "exported",
              "Prefix": "exported",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 180,
                },
              ],
            },
            Object {
              "ExpirationInDays": 365,
              "Id": "imported",
              "Prefix": "imported",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 180,
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerLogStorageSandbox42772588": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-log-storage-sandbox",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 3650,
              "Id": "zinger-log-storage",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerLogStorageSandboxPolicy9CE5AA55": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ZingerLogStorageSandbox42772588",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::582318560864:root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerLogStorageSandbox42772588",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/869997810708/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "s3:PutObject",
              "Condition": Object {
                "StringEquals": Object {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerLogStorageSandbox42772588",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/869997810708/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ZingerLogStorageSandbox42772588",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ZingerOpsStorageSandbox702463C6": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-ops-storage-sandbox",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 30,
              "Id": "zinger-ops-storage",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerPublicStorageSandbox2CAF8BCC": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-public-storage-sandbox",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "Id": "zinger-public-storage",
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 3650,
              },
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
        "WebsiteConfiguration": Object {
          "IndexDocument": "index.html",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerPublicStorageSandboxPolicyC4815F1A": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ZingerPublicStorageSandbox2CAF8BCC",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerPublicStorageSandbox2CAF8BCC",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerSecurityGroupStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupAlb46CA9FF7",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupBastionC7C3D040",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupMysqlD57A915B",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupRedis3D53F2D9",
          "GroupId",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerSecurityGroupAlb46CA9FF7": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupAlb",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupBastionC7C3D040": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupBastion",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupEcs831EAAB8": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupEcs",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupEcsfromZingerSecurityGroupStackZingerSecurityGroupAlbCC2AC14D550809F065831": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupAlbCC2AC14D:55080",
        "FromPort": 55080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupAlb46CA9FF7",
            "GroupId",
          ],
        },
        "ToPort": 55080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupEcsfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A5508017F1EFBF": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:55080",
        "FromPort": 55080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 55080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupMysqlD57A915B": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupMysql",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupMysqlfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A33061027A1DF": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupMysqlD57A915B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupMysqlfromZingerSecurityGroupStackZingerSecurityGroupEcs967C84323306077F6C51": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupEcs967C8432:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupMysqlD57A915B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupRedis3D53F2D9": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupRedis",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupRedisfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A6379476AC6E9": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:6379",
        "FromPort": 6379,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupRedis3D53F2D9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupRedisfromZingerSecurityGroupStackZingerSecurityGroupEcs967C84326379C150B161": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupEcs967C8432:6379",
        "FromPort": 6379,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupRedis3D53F2D9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerSqsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerQueue19D9885A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "FifoQueue": true,
        "QueueName": "ZingerQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment sandbox ZingerVpcStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputRefZingerVpcE887B962818892AA": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
      },
      "Value": Object {
        "Ref": "ZingerVpcE887B962",
      },
    },
    "ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
      },
      "Value": Object {
        "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
      },
    },
    "ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
      },
      "Value": Object {
        "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
      },
    },
    "ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
      },
      "Value": Object {
        "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
      },
    },
    "ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5",
      },
      "Value": Object {
        "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerVpcE887B962": Object {
      "Properties": Object {
        "CidrBlock": "16.26.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "ZingerVpcIGWAAEB5C30": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "ZingerVpcPrivateSubnet1DefaultRouteBE55C4A7": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "ZingerVpcPublicSubnet1NATGateway67A45EB0",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPrivateSubnet1RouteTable1270371F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPrivateSubnet1RouteTableAssociation9CDB3832": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPrivateSubnet1SubnetAB7C2829": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "16.26.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPrivateSubnet2DefaultRoute4D6724BD": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "ZingerVpcPublicSubnet1NATGateway67A45EB0",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPrivateSubnet2RouteTableAssociation5DE5645D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPrivateSubnet2SubnetC985B745": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "16.26.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPublicSubnet1DefaultRoute4B2C6402": Object {
      "DependsOn": Array [
        "ZingerVpcVPCGW2A01A394",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet1RouteTable2108AD82",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPublicSubnet1EIP24A52E6A": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerVpcPublicSubnet1NATGateway67A45EB0": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "ZingerVpcPublicSubnet1EIP24A52E6A",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ZingerVpcPublicSubnet1RouteTable2108AD82": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPublicSubnet1RouteTableAssociation52FFCD9A": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet1RouteTable2108AD82",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPublicSubnet1SubnetB7A28AAE": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "16.26.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPublicSubnet2DefaultRouteDAC3D769": Object {
      "DependsOn": Array [
        "ZingerVpcVPCGW2A01A394",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet2RouteTable1D39F9EF",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPublicSubnet2RouteTable1D39F9EF": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPublicSubnet2RouteTableAssociation6F736464": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet2RouteTable1D39F9EF",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPublicSubnet2SubnetC5C2022B": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "16.26.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcVPCGW2A01A394": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ZingerVpcZingerGatewayEndpointS3FFB59DD7": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointCloudwatchLogs6ACBF4C0": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointCloudwatchLogsSecurityGroup3DE843B3",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.logs",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointCloudwatchLogsSecurityGroup3DE843B3": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointCloudwatchLogs/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointEcr5E9757C0": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointEcrSecurityGroupD9C1EA56",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ecr.api",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointEcrDockerB1B9FB08": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointEcrDockerSecurityGroupD4E02C1C",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ecr.dkr",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointEcrDockerSecurityGroupD4E02C1C": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointEcrDocker/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointEcrSecurityGroupD9C1EA56": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointEcr/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointSsm77754242": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointSsmSecurityGroupE23F59A5",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ssm",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointSsmSecurityGroupE23F59A5": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointSsm/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcvpcFlowLog8F2EB798": Object {
      "Properties": Object {
        "LogDestination": Object {
          "Fn::ImportValue": "ZingerS3Stack:ExportsOutputFnGetAttZingerLogStorageSandbox42772588ArnD8208C25",
        },
        "LogDestinationType": "s3",
        "ResourceId": Object {
          "Ref": "ZingerVpcE887B962",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging GithubActionsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderHandlerF2C543E0": Object {
      "DependsOn": Array [
        "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-160644003485-ap-northeast-1",
          "S3Key": "494e82802f093e633e580188c7937aef9d6ee0ad4a788d58c647e6bea26d2915.zip",
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderRole517FED65": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "iam:CreateOpenIDConnectProvider",
                    "iam:DeleteOpenIDConnectProvider",
                    "iam:UpdateOpenIDConnectProviderThumbprint",
                    "iam:AddClientIDToOpenIDConnectProvider",
                    "iam:RemoveClientIDFromOpenIDConnectProvider",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Inline",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerGitHubActionsOidcProvider0DBBC94E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ClientIDList": Array [
          "sts.amazonaws.com",
        ],
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomAWSCDKOpenIdConnectProviderCustomResourceProviderHandlerF2C543E0",
            "Arn",
          ],
        },
        "ThumbprintList": Array [
          "6938fd4d98bab03faadb97b34396831e3780aea1",
        ],
        "Url": "https://token.actions.githubusercontent.com",
      },
      "Type": "Custom::AWSCDKOpenIdConnectProvider",
      "UpdateReplacePolicy": "Delete",
    },
    "ZingerGitHubActionsRoleFAAE0046": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": Object {
                "StringLike": Object {
                  "token.actions.githubusercontent.com:sub": "repo:eustylelab/zinger:*",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Federated": Object {
                  "Ref": "ZingerGitHubActionsOidcProvider0DBBC94E",
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonECS_FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLogsReadOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "ZingerGitHubActionsRole",
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging RedashStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerAlbDnsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerARecord13A775A7": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "ZingerAlb11686151",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "ZingerAlb11686151",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "DUMMY",
        "Name": "*.staging.careid.net.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ZingerAaaaRecordA8C1458C": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "ZingerAlb11686151",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "ZingerAlb11686151",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": "DUMMY",
        "Name": "*.staging.careid.net.",
        "Type": "AAAA",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "ZingerAlb11686151": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
          Object {
            "Key": "access_logs.s3.enabled",
            "Value": "true",
          },
          Object {
            "Key": "access_logs.s3.bucket",
            "Value": Object {
              "Fn::ImportValue": "ZingerS3Stack:ExportsOutputRefZingerLogStorageStaging54077AFD93475299",
            },
          },
          Object {
            "Key": "access_logs.s3.prefix",
            "Value": "",
          },
        ],
        "Name": "ZingerAlb",
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363",
          },
        ],
        "Subnets": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerAlb",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ZingerAlbZingerHttpListener6473941A": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ZingerTargetGroupD1CE7401",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ZingerAlb11686151",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ZingerAlbZingerHttpsListenerC8B1FB2D": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Fn::GetAtt": Array [
                "ZingerCertificateCertificateRequestorResource7602353B",
                "Arn",
              ],
            },
          },
        ],
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ZingerTargetGroupD1CE7401",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ZingerAlb11686151",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ZingerCertificateCertificateRequestorFunction436CF905": Object {
      "DependsOn": Array [
        "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0",
        "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-160644003485-ap-northeast-1",
          "S3Key": "8ddf29ab619460567d3cda58de2ff1bf0f6e95d8822ff630ec58a4d52ed1fa67.zip",
        },
        "Handler": "index.certificateRequestHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "acm:RequestCertificate",
                "acm:DescribeCertificate",
                "acm:DeleteCertificate",
                "acm:AddTagsToCertificate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:GetChange",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:changeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/DUMMY",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ZingerCertificateCertificateRequestorFunctionServiceRoleDefaultPolicyF419EAB0",
        "Roles": Array [
          Object {
            "Ref": "ZingerCertificateCertificateRequestorFunctionServiceRoleD5515E86",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ZingerCertificateCertificateRequestorResource7602353B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DomainName": "*.staging.careid.net",
        "HostedZoneId": "DUMMY",
        "Region": "ap-northeast-1",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "ZingerCertificateCertificateRequestorFunction436CF905",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ZingerHttpListenerRuleA677D4E4": Object {
      "Properties": Object {
        "Actions": Array [
          Object {
            "RedirectConfig": Object {
              "Port": "443",
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
            },
            "Type": "redirect",
          },
        ],
        "Conditions": Array [
          Object {
            "Field": "path-pattern",
            "PathPatternConfig": Object {
              "Values": Array [
                "*",
              ],
            },
          },
        ],
        "ListenerArn": Object {
          "Ref": "ZingerAlbZingerHttpListener6473941A",
        },
        "Priority": 1,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ZingerTargetGroupD1CE7401": Object {
      "Properties": Object {
        "Name": "ZingerTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "true",
          },
          Object {
            "Key": "stickiness.type",
            "Value": "lb_cookie",
          },
          Object {
            "Key": "stickiness.lb_cookie.duration_seconds",
            "Value": "86400",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerBastionStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "ZingerBastion538A6BFD": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": Object {
          "Ref": "ZingerBastionInstanceProfileC4002CEC",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t2.micro",
        "KeyName": "stagingZingerKey",
        "SecurityGroupIds": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29",
          },
        ],
        "SubnetId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerBastion",
          },
        ],
        "UserData": Object {
          "Fn::Base64": "#!/bin/bash
yum update -y
yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
yum-config-manager --enable mysql80-community
yum install -y mysql-community-client
amazon-linux-extras install -y redis4.0
yum install -y stunnel
hostnamectl set-hostname zinger-bastion-staging",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "ZingerBastionElasticIp": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerBastionElasticIp",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerBastionElasticIpAssociation": Object {
      "Properties": Object {
        "EIP": Object {
          "Ref": "ZingerBastionElasticIp",
        },
        "InstanceId": Object {
          "Ref": "ZingerBastion538A6BFD",
        },
      },
      "Type": "AWS::EC2::EIPAssociation",
    },
    "ZingerBastionInstanceProfileC4002CEC": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Fn::ImportValue": "ZingerIamStack:ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerDbStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerMysql9818A87E": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "AllocatedStorage": "100",
        "AutoMinorVersionUpgrade": false,
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t2.micro",
        "DBInstanceIdentifier": "zinger-mysql",
        "DBName": "zinger",
        "DBParameterGroupName": Object {
          "Ref": "ZingerMysqlParameterGroup76029A07",
        },
        "DBSubnetGroupName": Object {
          "Ref": "ZingerMysqlSubnetGroup8886398E",
        },
        "DeletionProtection": true,
        "EnableCloudwatchLogsExports": Array [
          "error",
          "slowquery",
        ],
        "Engine": "mysql",
        "EngineVersion": "8.0.28",
        "MasterUserPassword": "{{resolve:ssm-secure:/zinger/secure/dbMasterPassword:1}}",
        "MasterUsername": "zinger_master",
        "MultiAZ": false,
        "PreferredBackupWindow": "20:05-20:35",
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508",
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "ZingerMysqlParameterGroup76029A07": Object {
      "Properties": Object {
        "Description": "Parameter group for mysql8.0",
        "Family": "mysql8.0",
        "Parameters": Object {
          "log_bin_trust_function_creators": "1",
          "long_query_time": "1",
        },
      },
      "Type": "AWS::RDS::DBParameterGroup",
    },
    "ZingerMysqlSubnetGroup8886398E": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for ZingerMysql database",
        "SubnetIds": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "ZingerSsmMysqlHostD286E771": Object {
      "Properties": Object {
        "Name": "/zinger/string/dbHost",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "ZingerMysql9818A87E",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerEcrStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerAppCliStagingEA2E1498": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/app-cli-staging",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerAppServerStaging60F1416D": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/app-server-staging",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerWebStagingAAB48B11": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "LifecyclePolicy": Object {
          "LifecyclePolicyText": "{\\"rules\\":[{\\"rulePriority\\":1,\\"description\\":\\"holded 10 images\\",\\"selection\\":{\\"tagStatus\\":\\"any\\",\\"countType\\":\\"imageCountMoreThan\\",\\"countNumber\\":10},\\"action\\":{\\"type\\":\\"expire\\"}}]}",
        },
        "RepositoryName": "zinger/web-staging",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerEcsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerEcsC496BF8F": Object {
      "Properties": Object {
        "ClusterName": "ZingerEcsCluster",
      },
      "Type": "AWS::ECS::Cluster",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerIamStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538": Object {
      "Export": Object {
        "Name": "ZingerIamStack:ExportsOutputRefZingerIamBastionRoleEE6547EA71FD5538",
      },
      "Value": Object {
        "Ref": "ZingerIamBastionRoleEE6547EA",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "ZingerExternalIdParameter": Object {
      "Default": "/zinger/string/mackerelExternalId",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerIamBastionRoleEE6547EA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSQSFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
        ],
        "RoleName": "ZingerBastionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsEventsRole6DFC1A82": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "RoleName": "ecsEventsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsTaskExecutionRole0FE66AEB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonECS_FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
        "RoleName": "ZingerEcsTaskExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerIamEcsTaskRole97A462F3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonS3FullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSQSFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMDirectoryServiceAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchFullAccess",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
              ],
            ],
          },
        ],
        "RoleName": "ZingerEcsTaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "ZingerMackerelPolicyC4CA3580": Object {
      "Properties": Object {
        "Description": "",
        "ManagedPolicyName": "ZingerMackerelPolicy",
        "Path": "/",
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "ec2:DescribeInstances",
                "ecs:DescribeClusters",
                "ecs:List*",
                "elasticache:Describe*",
                "elasticache:ListTagsForResource",
                "elasticloadbalancing:Describe*",
                "iam:GetUser",
                "rds:Describe*",
                "rds:ListTagsForResource",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "ZingerMackerelRole757B60EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Condition": Object {
                "StringEquals": Object {
                  "sts:ExternalId": Object {
                    "Ref": "ZingerExternalIdParameter",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::217452466226:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Ref": "ZingerMackerelPolicyC4CA3580",
          },
        ],
        "RoleName": "ZingerMackerelRole",
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerRedisStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerRedisSubnetGroup": Object {
      "Properties": Object {
        "CacheSubnetGroupName": "zinger-redis-subnet-group",
        "Description": "subnet is private",
        "SubnetIds": Array [
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
          },
          Object {
            "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
          },
        ],
      },
      "Type": "AWS::ElastiCache::SubnetGroup",
    },
    "ZingerReplicationGroup": Object {
      "DependsOn": Array [
        "ZingerRedisSubnetGroup",
      ],
      "Properties": Object {
        "AuthToken": "{{resolve:ssm-secure:/zinger/secure/redisPassword:1}}",
        "AutomaticFailoverEnabled": false,
        "CacheNodeType": "cache.t2.micro",
        "CacheSubnetGroupName": "zinger-redis-subnet-group",
        "Engine": "redis",
        "EngineVersion": "6.x",
        "MultiAZEnabled": false,
        "NumCacheClusters": 1,
        "ReplicationGroupDescription": "Zinger redis replication",
        "SecurityGroupIds": Array [
          Object {
            "Fn::ImportValue": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03",
          },
        ],
        "TransitEncryptionEnabled": true,
      },
      "Type": "AWS::ElastiCache::ReplicationGroup",
    },
    "ZingerSsmRedisHost2390C4E7": Object {
      "Properties": Object {
        "Name": "/zinger/string/redisHost",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "ZingerReplicationGroup",
            "PrimaryEndPoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerS3Stack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputFnGetAttZingerLogStorageStaging54077AFDArn05DF41A9": Object {
      "Export": Object {
        "Name": "ZingerS3Stack:ExportsOutputFnGetAttZingerLogStorageStaging54077AFDArn05DF41A9",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerLogStorageStaging54077AFD",
          "Arn",
        ],
      },
    },
    "ExportsOutputRefZingerLogStorageStaging54077AFD93475299": Object {
      "Export": Object {
        "Name": "ZingerS3Stack:ExportsOutputRefZingerLogStorageStaging54077AFD93475299",
      },
      "Value": Object {
        "Ref": "ZingerLogStorageStaging54077AFD",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerAppStorageStaging39A32BAB": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-app-storage-staging",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 3650,
              "Id": "artifacts",
              "Prefix": "artifacts",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 365,
                },
              ],
            },
            Object {
              "ExpirationInDays": 30,
              "Id": "temp",
              "Prefix": "temp",
              "Status": "Enabled",
            },
            Object {
              "ExpirationInDays": 365,
              "Id": "exported",
              "Prefix": "exported",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 180,
                },
              ],
            },
            Object {
              "ExpirationInDays": 365,
              "Id": "imported",
              "Prefix": "imported",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 180,
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerLogStorageStaging54077AFD": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-log-storage-staging",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 3650,
              "Id": "zinger-log-storage",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerLogStorageStagingPolicyF1B49A59": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ZingerLogStorageStaging54077AFD",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::582318560864:root",
                    ],
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerLogStorageStaging54077AFD",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/160644003485/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "s3:PutObject",
              "Condition": Object {
                "StringEquals": Object {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerLogStorageStaging54077AFD",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/160644003485/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "delivery.logs.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ZingerLogStorageStaging54077AFD",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "ZingerOpsStorageStaging5FD0E610": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-ops-storage-staging",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationInDays": 30,
              "Id": "zinger-ops-storage",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerPublicStorageStaging5D8CC737": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketName": "zinger-public-storage-staging",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "Id": "zinger-public-storage",
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 3650,
              },
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
        "WebsiteConfiguration": Object {
          "IndexDocument": "index.html",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ZingerPublicStorageStagingPolicy50974FC0": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "ZingerPublicStorageStaging5D8CC737",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "ZingerPublicStorageStaging5D8CC737",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerSecurityGroupStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupAlb46CA9FF7GroupIdBA56B363",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupAlb46CA9FF7",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupBastionC7C3D040GroupId933E4F29",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupBastionC7C3D040",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupMysqlD57A915BGroupId1A2F5508",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupMysqlD57A915B",
          "GroupId",
        ],
      },
    },
    "ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03": Object {
      "Export": Object {
        "Name": "ZingerSecurityGroupStack:ExportsOutputFnGetAttZingerSecurityGroupRedis3D53F2D9GroupId11CA7E03",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ZingerSecurityGroupRedis3D53F2D9",
          "GroupId",
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerSecurityGroupAlb46CA9FF7": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupAlb",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupBastionC7C3D040": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupBastion",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupEcs831EAAB8": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupEcs",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupEcsfromZingerSecurityGroupStackZingerSecurityGroupAlbCC2AC14D550809F065831": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupAlbCC2AC14D:55080",
        "FromPort": 55080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupAlb46CA9FF7",
            "GroupId",
          ],
        },
        "ToPort": 55080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupEcsfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A5508017F1EFBF": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:55080",
        "FromPort": 55080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 55080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupMysqlD57A915B": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupMysql",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupMysqlfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A33061027A1DF": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupMysqlD57A915B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupMysqlfromZingerSecurityGroupStackZingerSecurityGroupEcs967C84323306077F6C51": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupEcs967C8432:3306",
        "FromPort": 3306,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupMysqlD57A915B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "ToPort": 3306,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupRedis3D53F2D9": Object {
      "Properties": Object {
        "GroupDescription": "ZingerSecurityGroupStack/ZingerSecurityGroupRedis",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerSecurityGroupRedisfromZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A6379476AC6E9": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupBastion02E91C3A:6379",
        "FromPort": 6379,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupRedis3D53F2D9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupBastionC7C3D040",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ZingerSecurityGroupRedisfromZingerSecurityGroupStackZingerSecurityGroupEcs967C84326379C150B161": Object {
      "Properties": Object {
        "Description": "from ZingerSecurityGroupStackZingerSecurityGroupEcs967C8432:6379",
        "FromPort": 6379,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupRedis3D53F2D9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ZingerSecurityGroupEcs831EAAB8",
            "GroupId",
          ],
        },
        "ToPort": 6379,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerSqsStack should be deployed correctly 1`] = `
Object {
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerQueue19D9885A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ContentBasedDeduplication": true,
        "FifoQueue": true,
        "QueueName": "ZingerQueue.fifo",
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`aws cdk deployment staging ZingerVpcStack should be deployed correctly 1`] = `
Object {
  "Outputs": Object {
    "ExportsOutputRefZingerVpcE887B962818892AA": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcE887B962818892AA",
      },
      "Value": Object {
        "Ref": "ZingerVpcE887B962",
      },
    },
    "ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet1SubnetAB7C282937D4812C",
      },
      "Value": Object {
        "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
      },
    },
    "ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPrivateSubnet2SubnetC985B7457304FD7D",
      },
      "Value": Object {
        "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
      },
    },
    "ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet1SubnetB7A28AAE6425E5F9",
      },
      "Value": Object {
        "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
      },
    },
    "ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5": Object {
      "Export": Object {
        "Name": "ZingerVpcStack:ExportsOutputRefZingerVpcPublicSubnet2SubnetC5C2022B56A8E7C5",
      },
      "Value": Object {
        "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ZingerVpcE887B962": Object {
      "Properties": Object {
        "CidrBlock": "10.25.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "ZingerVpcIGWAAEB5C30": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "ZingerVpcPrivateSubnet1DefaultRouteBE55C4A7": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "ZingerVpcPublicSubnet1NATGateway67A45EB0",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPrivateSubnet1RouteTable1270371F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPrivateSubnet1RouteTableAssociation9CDB3832": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPrivateSubnet1SubnetAB7C2829": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.25.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPrivateSubnet2DefaultRoute4D6724BD": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "ZingerVpcPublicSubnet1NATGateway67A45EB0",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPrivateSubnet2RouteTableAssociation5DE5645D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPrivateSubnet2SubnetC985B745": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.25.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPublicSubnet1DefaultRoute4B2C6402": Object {
      "DependsOn": Array [
        "ZingerVpcVPCGW2A01A394",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet1RouteTable2108AD82",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPublicSubnet1EIP24A52E6A": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ZingerVpcPublicSubnet1NATGateway67A45EB0": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "ZingerVpcPublicSubnet1EIP24A52E6A",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ZingerVpcPublicSubnet1RouteTable2108AD82": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPublicSubnet1RouteTableAssociation52FFCD9A": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet1RouteTable2108AD82",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet1SubnetB7A28AAE",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPublicSubnet1SubnetB7A28AAE": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.25.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcPublicSubnet2DefaultRouteDAC3D769": Object {
      "DependsOn": Array [
        "ZingerVpcVPCGW2A01A394",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet2RouteTable1D39F9EF",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ZingerVpcPublicSubnet2RouteTable1D39F9EF": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ZingerVpcPublicSubnet2RouteTableAssociation6F736464": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "ZingerVpcPublicSubnet2RouteTable1D39F9EF",
        },
        "SubnetId": Object {
          "Ref": "ZingerVpcPublicSubnet2SubnetC5C2022B",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ZingerVpcPublicSubnet2SubnetC5C2022B": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.25.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ZingerVpcVPCGW2A01A394": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "ZingerVpcIGWAAEB5C30",
        },
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ZingerVpcZingerGatewayEndpointS3FFB59DD7": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1RouteTable1270371F",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2RouteTableF4BAEEF8",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointCloudwatchLogs6ACBF4C0": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointCloudwatchLogsSecurityGroup3DE843B3",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.logs",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointCloudwatchLogsSecurityGroup3DE843B3": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointCloudwatchLogs/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointEcr5E9757C0": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointEcrSecurityGroupD9C1EA56",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ecr.api",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointEcrDockerB1B9FB08": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointEcrDockerSecurityGroupD4E02C1C",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ecr.dkr",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointEcrDockerSecurityGroupD4E02C1C": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointEcrDocker/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointEcrSecurityGroupD9C1EA56": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointEcr/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcZingerInterfaceEndpointSsm77754242": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "ZingerVpcZingerInterfaceEndpointSsmSecurityGroupE23F59A5",
              "GroupId",
            ],
          },
        ],
        "ServiceName": "com.amazonaws.ap-northeast-1.ssm",
        "SubnetIds": Array [
          Object {
            "Ref": "ZingerVpcPrivateSubnet1SubnetAB7C2829",
          },
          Object {
            "Ref": "ZingerVpcPrivateSubnet2SubnetC985B745",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZingerVpcZingerInterfaceEndpointSsmSecurityGroupE23F59A5": Object {
      "Properties": Object {
        "GroupDescription": "ZingerVpcStack/ZingerVpc/ZingerInterfaceEndpointSsm/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "ZingerVpcE887B962",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "ZingerVpcE887B962",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "VpcId": Object {
          "Ref": "ZingerVpcE887B962",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ZingerVpcvpcFlowLog8F2EB798": Object {
      "Properties": Object {
        "LogDestination": Object {
          "Fn::ImportValue": "ZingerS3Stack:ExportsOutputFnGetAttZingerLogStorageStaging54077AFDArn05DF41A9",
        },
        "LogDestinationType": "s3",
        "ResourceId": Object {
          "Ref": "ZingerVpcE887B962",
        },
        "ResourceType": "VPC",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ZingerVpcStack/ZingerVpc",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
