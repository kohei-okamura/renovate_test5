name: Deploy

on:
  workflow_call:
    inputs:
      aws-profile:
        required: true
        type: string
      stage:
        required: true
        type: string
      stage-name:
        required: true
        type: string
    secrets:
      aws-role-to-assume:
        required: true
      slack-webhook:
        required: true

env:
  AWS_PROFILE: ${{ inputs.aws-profile }}
  GCR_REGISTRY: ghcr.io/eustylelab
  STAGE: ${{ inputs.stage }}

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.stage }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node-js

      - name: Slack Notification 1
        uses: ./.github/actions/notify-to-slack
        with:
          text: ${{ inputs.stage-name }}${{ 'へのデプロイを開始しました。' }}
          url: ${{ secrets.slack-webhook }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull from GitHub Container Registry
        run: |
          STAGES=(
            "staging"
            "prod"
          )
          IMAGES=(
            "app-cli"
            "app-server"
            "web"
          )
          for STAGE in "${STAGES[@]}"; do
            for IMAGE in "${IMAGES[@]}"; do
              docker pull "${GCR_REGISTRY}/zinger-${IMAGE}-${STAGE}:latest" || true
            done
          done

      - name: Build Docker Images
        run: yarn "docker:build:${STAGE}"
        env:
          # Node.js 18.x で Nuxt.js がビルドできない問題に対応する
          # see https://qiita.com/akitkat/items/f455bbc088a408cbc3a5
          NODE_OPTIONS: --openssl-legacy-provider

      - name: Push to GitHub Container Registry
        run: |
          IMAGES=(
            "app-cli"
            "app-server"
            "web"
          )
          for IMAGE in "${IMAGES[@]}"; do
            docker tag "zinger/${IMAGE}-${STAGE}:latest" "${GCR_REGISTRY}/zinger-${IMAGE}-${STAGE}:latest"
            docker push "${GCR_REGISTRY}/zinger-${IMAGE}-${STAGE}:latest"
          done

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.aws-role-to-assume }}
          role-session-name: GitHubActions-${{ github.run_id }}
          role-duration-seconds: 900

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag
        id: image-tag
        run: echo "tag=$(date '+%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        env:
          TZ: Asia/Tokyo

      - name: Push to Amazon ECR
        run: |
          IMAGES=(
            "app-cli"
            "app-server"
            "web"
          )
          for IMAGE in "${IMAGES[@]}"; do
            docker tag "zinger/${IMAGE}-${STAGE}:latest" "${ECR_REGISTRY}/zinger/${IMAGE}-${STAGE}:${TAG}"
            docker push "${ECR_REGISTRY}/zinger/${IMAGE}-${STAGE}:${TAG}"
          done
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.image-tag.outputs.tag }}

      - name: Register Task Definitions
        run: yarn aws:ecs:register --github --profile "${AWS_PROFILE}" --tag "${TAG}"
        env:
          TAG: ${{ steps.image-tag.outputs.tag }}

      - name: Run Migration
        run: yarn aws:ecs:run:migration --github --profile "${AWS_PROFILE}"

      - name: Update ECS Cluster
        run: |
          yarn aws:ecs:update:service --profile "${AWS_PROFILE}" --github
          yarn aws:ecs:update:queue --profile "${AWS_PROFILE}" --github

      - name: Slack Notification 2
        uses: ./.github/actions/notify-to-slack
        with:
          text: ${{ inputs.stage-name }}${{ 'へのデプロイが完了しました。イメージタグは ' }}${{ steps.image-tag.outputs.tag }}${{ ' です。' }}
          url: ${{ secrets.slack-webhook }}
